#!/usr/bin/env python3
"""
Start script for RAG application with FAISS
This script initializes the application with FAISS vector database.
"""

import os
import sys
import asyncio
import uvicorn
from pathlib import Path

# Add backend to path
backend_path = Path(__file__).parent / "backend"
sys.path.append(str(backend_path))

async def init_application():
    """Initialize the application with FAISS"""
    try:
        print("üöÄ Initializing RAG Application with FAISS")
        print("=" * 50)
        
        # Import and initialize database
        from database import init_db
        await init_db()
        print("‚úÖ Database initialized")
        
        # Initialize FAISS with sample data if empty
        from database import get_faiss_index
        faiss_index = get_faiss_index()
        
        if faiss_index.ntotal == 0:
            print("üìö Initializing FAISS with sample data...")
            # Add sample data directly
            from sentence_transformers import SentenceTransformer
            from database import add_to_faiss
            
            embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
            
            # Sample documents
            sample_docs = [
                "H·ªçc vi·ªán C√¥ng ngh·ªá B∆∞u ch√≠nh Vi·ªÖn th√¥ng - ƒê·∫°i h·ªçc Qu·ªëc gia TP.HCM (PTITHCM) l√† m·ªôt h·ªçc vi·ªán c√¥ng l·∫≠p chuy√™n v·ªÅ c√¥ng ngh·ªá th√¥ng tin t·∫°i Vi·ªát Nam.",
                "PTITHCM ƒë∆∞·ª£c th√†nh l·∫≠p nƒÉm 2006 v√† l√† m·ªôt trong nh·ªØng h·ªçc vi·ªán h√†ng ƒë·∫ßu v·ªÅ ƒë√†o t·∫°o c√¥ng ngh·ªá th√¥ng tin t·∫°i Vi·ªát Nam.",
                "H·ªçc vi·ªán c√≥ c√°c ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·∫°i h·ªçc, th·∫°c sƒ© v√† ti·∫øn sƒ© v·ªÅ c√°c lƒ©nh v·ª±c c√¥ng ngh·ªá th√¥ng tin."
            ]
            
            sample_metadata = [
                {"source": "intro", "category": "general"},
                {"source": "history", "category": "general"},
                {"source": "programs", "category": "academic"}
            ]
            
            # Generate embeddings and add to FAISS
            embeddings = embedding_model.encode(sample_docs)
            add_to_faiss(embeddings, sample_docs, sample_metadata)
            print("‚úÖ Sample data loaded")
        else:
            print(f"‚úÖ FAISS index ready with {faiss_index.ntotal} vectors")
        
        print("üéâ Application ready to start!")
        return True
        
    except Exception as e:
        print(f"‚ùå Initialization failed: {e}")
        return False

def start_server():
    """Start the FastAPI server"""
    try:
        print("üåê Starting FastAPI server...")
        
        # Change to backend directory
        os.chdir("backend")
        
        # Start uvicorn server
        uvicorn.run(
            "main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info"
        )
        
    except Exception as e:
        print(f"‚ùå Server start failed: {e}")
        sys.exit(1)

async def main():
    """Main function"""
    print("üîß RAG Application with FAISS")
    print("=" * 40)
    
    # Initialize application
    success = await init_application()
    
    if success:
        # Start server
        start_server()
    else:
        print("‚ùå Failed to initialize application")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 